Las llamadas a una API siguen un patrón similar siempre que las hacemos, cada llamada consta de tres estados:

  --Loading: cuando la petición se envía y estamos esperando.
  --Error: se debe dejar un mensaje para el usuario para arreglar el error o volver a intentarlo.
  --ErrorData: los datos nos pueden llegar de dos formas, o en error o con los datos requeridos.


  // *******************************************************************************************************//

  --Una llamada a una API es un proceso asíncrono, es decir que lo comenzamos pero no sabemos cuándo acabará. Por lo mismo la función a escribir debe ser asíncrona.
  --La llamada se hará usando fetch que es una función de JavaScript que al pasarle una dirección de internet, hará una petición GET y lo que sea que exista ahí será devuelto.


  // *****************************************index.js*************************************************//

    import React from 'react';  // crear el elemento
    import ReactDOM from 'react-dom';
    import 'bootstrap/dist/css/bootstrap.css';
    import './global.scss';

    import App from './components/App'; // Importar App.js


    const container = document.getElementById('app');

    ReactDOM.render(<App />, container);

  // *******************************************App.js*****************************************************//

    import React from 'react';
    import './styles/App.scss';

    class App extends React.Component {

      state = {
        loading: true, // Estado de estoy buscando la informacion por si el servidor esta caído. true empieza buscando los datos
        error: null, // No se comienza con un error por lo tanto se deja null
        data: {     // Inicializar data con elementos vacios para que no presente error en consola
          info: {},
          results: []
        },
        nextPage: 1 // inicializa el numero de pagina para que el button pueda continuar con la pagina 2
      };

      componentDidMount() {
        this.fetchCharacters(); // Al montar el componente llama a fetchCharacters
      }


      fetchCharacters = async () => {
        this.setState({ loading: true, error: null }); // Utilizamos los estados inicializados en state para uindicar que estamos cargando datos

        try {
          const response = await fetch(`https://rickandmortyapi.com/api/character/?page=${this.state.nextPage}`);
          const data = await response.json(); // se optiene del response el json data

            this.setState({  // se guarda la informacion en el estado de este componente
              loading: false, // Cuando se acaba de cargar los datos loading: false
              data: {info: data.info, results: [].concat(this.state.data.results, data.results)}, // si hay varias paginas de informacionse concatena para
              nextPage: this.state.nextPage + 1 // aumenta el numero de la pagina                    mostrar lo que se trajo y la siguiente pagina
            });
        } catch (error) { // manejo de error con try y catch
          this.setState({ loading: false, error: error });
        }
      };


      render() {

        if (this.state.error) {
          return `Error: ${this.state.error.message}`; // Si ocurre un error retorne el mensaje del error
        }

        return (
          <div className="container">
              <div className="app">
                <ul className="row">
                    {this.state.data.results.map(detalle =>(
                      <li className="col-2 col-md-4" key={detalle.id}>
                          <div className="CharacterCard" style={{ backgroundImage: `url(${detalle.image})` }}>
                              <div className="CharacterCard__name-container text-truncate">
                                  {detalle.name}
                              </div>
                          </div>
                      </li>
                    ))}
                </ul>

                {this.state.loading && <p className="text-center">Loading...</p>}

                {!this.state.loading && this.state.data.info.next && (<button onClick={() => this.fetchCharacters()}>Load More</button>)}

              </div>
          </div>
        )
      }
    }

    export default App;

  // ******************************************App.scss****************************************************//



.App {
  display: flex;
  flex-direction: column;
}

.Logo {
  align-self: center;
  max-width: 100%;
}

ul {
  list-style: none;
  padding-left: 0;
}

.container {
  width: 100%;
  max-width: 900px;
  margin: 0 auto;
}

.row {
  display: flex;
  flex-wrap: wrap;
}

.col-6 {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  flex-basis: 50%;
}

@media screen and (min-width: 600px) {
  .col-md-3 {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    flex-basis: 25%;
  }
}

.CharacterCard {
  width: 100%;
  height: 240px;
  background: white;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  border-radius: 5px;
  overflow: hidden;
  margin-bottom: 1rem;
  position: relative;
}

.CharacterCard__name-container {
  color: white;
  position: absolute;
  bottom: 0;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  padding: 1rem 0.5rem;
}

.text-truncate {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.text-center {
  text-align: center;
  background-color:red;
}

button {
  background-color: #44c767;
  border-radius: 4px;
  border: 1px solid #18ab29;
  display: inline-block;
  cursor: pointer;
  color: #ffffff;
  font-size: 17px;
  padding: 16px 31px;
  text-decoration: none;
  text-shadow: 0px 1px 0px #2f6627;
  width: 100%;
}

  // *******************************************************************************************************//
  // *******************************************************************************************************//